package com.cmj.example.base;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class FundEntryBaseExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table t_base_fundentry
     *
     * @mbg.generated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table t_base_fundentry
     *
     * @mbg.generated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table t_base_fundentry
     *
     * @mbg.generated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table t_base_fundentry
     *
     * @mbg.generated
     */
    protected Integer offset;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table t_base_fundentry
     *
     * @mbg.generated
     */
    protected Integer rows;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_base_fundentry
     *
     * @mbg.generated
     */
    public FundEntryBaseExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_base_fundentry
     *
     * @mbg.generated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_base_fundentry
     *
     * @mbg.generated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_base_fundentry
     *
     * @mbg.generated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_base_fundentry
     *
     * @mbg.generated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_base_fundentry
     *
     * @mbg.generated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_base_fundentry
     *
     * @mbg.generated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_base_fundentry
     *
     * @mbg.generated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_base_fundentry
     *
     * @mbg.generated
     */
    public FundEntryBaseExample orderBy(String orderByClause) {
        this.setOrderByClause(orderByClause);
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_base_fundentry
     *
     * @mbg.generated
     */
    public FundEntryBaseExample orderBy(String ... orderByClauses) {
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < orderByClauses.length; i++) {
            sb.append(orderByClauses[i]);
            if (i < orderByClauses.length - 1) {
                sb.append(" , ");
            }
        }
        this.setOrderByClause(sb.toString());
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_base_fundentry
     *
     * @mbg.generated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_base_fundentry
     *
     * @mbg.generated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria(this);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_base_fundentry
     *
     * @mbg.generated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
        rows = null;
        offset = null;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_base_fundentry
     *
     * @mbg.generated
     */
    public void setOffset(Integer offset) {
        this.offset = offset;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_base_fundentry
     *
     * @mbg.generated
     */
    public Integer getOffset() {
        return this.offset;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_base_fundentry
     *
     * @mbg.generated
     */
    public void setRows(Integer rows) {
        this.rows = rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_base_fundentry
     *
     * @mbg.generated
     */
    public Integer getRows() {
        return this.rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_base_fundentry
     *
     * @mbg.generated
     */
    public FundEntryBaseExample limit(Integer rows) {
        this.rows = rows;
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_base_fundentry
     *
     * @mbg.generated
     */
    public FundEntryBaseExample limit(Integer offset, Integer rows) {
        this.offset = offset;
        this.rows = rows;
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_base_fundentry
     *
     * @mbg.generated
     */
    public FundEntryBaseExample page(Integer page, Integer pageSize) {
        this.offset = page * pageSize;
        this.rows = pageSize;
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_base_fundentry
     *
     * @mbg.generated
     */
    public static Criteria newAndCreateCriteria() {
        FundEntryBaseExample example = new FundEntryBaseExample();
        return example.createCriteria();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_base_fundentry
     *
     * @mbg.generated
     */
    public FundEntryBaseExample when(boolean condition, IExampleWhen then) {
        if (condition) {
            then.example(this);
        }
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_base_fundentry
     *
     * @mbg.generated
     */
    public FundEntryBaseExample when(boolean condition, IExampleWhen then, IExampleWhen otherwise) {
        if (condition) {
            then.example(this);
        } else {
            otherwise.example(this);
        }
        return this;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table t_base_fundentry
     *
     * @mbg.generated
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andIdIsNull() {
            addCriterion("FId is null");
            return (Criteria) this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("FId is not null");
            return (Criteria) this;
        }

        public Criteria andIdEqualTo(Integer value) {
            addCriterion("FId =", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdEqualToColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FId = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdNotEqualTo(Integer value) {
            addCriterion("FId <>", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotEqualToColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FId <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdGreaterThan(Integer value) {
            addCriterion("FId >", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FId > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("FId >=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanOrEqualToColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FId >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdLessThan(Integer value) {
            addCriterion("FId <", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThanColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FId < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdLessThanOrEqualTo(Integer value) {
            addCriterion("FId <=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThanOrEqualToColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FId <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdIn(List<Integer> values) {
            addCriterion("FId in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotIn(List<Integer> values) {
            addCriterion("FId not in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdBetween(Integer value1, Integer value2) {
            addCriterion("FId between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotBetween(Integer value1, Integer value2) {
            addCriterion("FId not between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andFundIdIsNull() {
            addCriterion("FFundId is null");
            return (Criteria) this;
        }

        public Criteria andFundIdIsNotNull() {
            addCriterion("FFundId is not null");
            return (Criteria) this;
        }

        public Criteria andFundIdEqualTo(String value) {
            addCriterion("FFundId =", value, "fundId");
            return (Criteria) this;
        }

        public Criteria andFundIdEqualToColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FFundId = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andFundIdNotEqualTo(String value) {
            addCriterion("FFundId <>", value, "fundId");
            return (Criteria) this;
        }

        public Criteria andFundIdNotEqualToColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FFundId <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andFundIdGreaterThan(String value) {
            addCriterion("FFundId >", value, "fundId");
            return (Criteria) this;
        }

        public Criteria andFundIdGreaterThanColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FFundId > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andFundIdGreaterThanOrEqualTo(String value) {
            addCriterion("FFundId >=", value, "fundId");
            return (Criteria) this;
        }

        public Criteria andFundIdGreaterThanOrEqualToColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FFundId >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andFundIdLessThan(String value) {
            addCriterion("FFundId <", value, "fundId");
            return (Criteria) this;
        }

        public Criteria andFundIdLessThanColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FFundId < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andFundIdLessThanOrEqualTo(String value) {
            addCriterion("FFundId <=", value, "fundId");
            return (Criteria) this;
        }

        public Criteria andFundIdLessThanOrEqualToColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FFundId <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andFundIdLike(String value) {
            addCriterion("FFundId like", value, "fundId");
            return (Criteria) this;
        }

        public Criteria andFundIdNotLike(String value) {
            addCriterion("FFundId not like", value, "fundId");
            return (Criteria) this;
        }

        public Criteria andFundIdIn(List<String> values) {
            addCriterion("FFundId in", values, "fundId");
            return (Criteria) this;
        }

        public Criteria andFundIdNotIn(List<String> values) {
            addCriterion("FFundId not in", values, "fundId");
            return (Criteria) this;
        }

        public Criteria andFundIdBetween(String value1, String value2) {
            addCriterion("FFundId between", value1, value2, "fundId");
            return (Criteria) this;
        }

        public Criteria andFundIdNotBetween(String value1, String value2) {
            addCriterion("FFundId not between", value1, value2, "fundId");
            return (Criteria) this;
        }

        public Criteria andStockNumberIsNull() {
            addCriterion("FStockNumber is null");
            return (Criteria) this;
        }

        public Criteria andStockNumberIsNotNull() {
            addCriterion("FStockNumber is not null");
            return (Criteria) this;
        }

        public Criteria andStockNumberEqualTo(String value) {
            addCriterion("FStockNumber =", value, "stockNumber");
            return (Criteria) this;
        }

        public Criteria andStockNumberEqualToColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FStockNumber = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andStockNumberNotEqualTo(String value) {
            addCriterion("FStockNumber <>", value, "stockNumber");
            return (Criteria) this;
        }

        public Criteria andStockNumberNotEqualToColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FStockNumber <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andStockNumberGreaterThan(String value) {
            addCriterion("FStockNumber >", value, "stockNumber");
            return (Criteria) this;
        }

        public Criteria andStockNumberGreaterThanColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FStockNumber > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andStockNumberGreaterThanOrEqualTo(String value) {
            addCriterion("FStockNumber >=", value, "stockNumber");
            return (Criteria) this;
        }

        public Criteria andStockNumberGreaterThanOrEqualToColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FStockNumber >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andStockNumberLessThan(String value) {
            addCriterion("FStockNumber <", value, "stockNumber");
            return (Criteria) this;
        }

        public Criteria andStockNumberLessThanColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FStockNumber < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andStockNumberLessThanOrEqualTo(String value) {
            addCriterion("FStockNumber <=", value, "stockNumber");
            return (Criteria) this;
        }

        public Criteria andStockNumberLessThanOrEqualToColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FStockNumber <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andStockNumberLike(String value) {
            addCriterion("FStockNumber like", value, "stockNumber");
            return (Criteria) this;
        }

        public Criteria andStockNumberNotLike(String value) {
            addCriterion("FStockNumber not like", value, "stockNumber");
            return (Criteria) this;
        }

        public Criteria andStockNumberIn(List<String> values) {
            addCriterion("FStockNumber in", values, "stockNumber");
            return (Criteria) this;
        }

        public Criteria andStockNumberNotIn(List<String> values) {
            addCriterion("FStockNumber not in", values, "stockNumber");
            return (Criteria) this;
        }

        public Criteria andStockNumberBetween(String value1, String value2) {
            addCriterion("FStockNumber between", value1, value2, "stockNumber");
            return (Criteria) this;
        }

        public Criteria andStockNumberNotBetween(String value1, String value2) {
            addCriterion("FStockNumber not between", value1, value2, "stockNumber");
            return (Criteria) this;
        }

        public Criteria andStockNamerIsNull() {
            addCriterion("FStockNamer is null");
            return (Criteria) this;
        }

        public Criteria andStockNamerIsNotNull() {
            addCriterion("FStockNamer is not null");
            return (Criteria) this;
        }

        public Criteria andStockNamerEqualTo(String value) {
            addCriterion("FStockNamer =", value, "stockNamer");
            return (Criteria) this;
        }

        public Criteria andStockNamerEqualToColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FStockNamer = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andStockNamerNotEqualTo(String value) {
            addCriterion("FStockNamer <>", value, "stockNamer");
            return (Criteria) this;
        }

        public Criteria andStockNamerNotEqualToColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FStockNamer <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andStockNamerGreaterThan(String value) {
            addCriterion("FStockNamer >", value, "stockNamer");
            return (Criteria) this;
        }

        public Criteria andStockNamerGreaterThanColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FStockNamer > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andStockNamerGreaterThanOrEqualTo(String value) {
            addCriterion("FStockNamer >=", value, "stockNamer");
            return (Criteria) this;
        }

        public Criteria andStockNamerGreaterThanOrEqualToColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FStockNamer >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andStockNamerLessThan(String value) {
            addCriterion("FStockNamer <", value, "stockNamer");
            return (Criteria) this;
        }

        public Criteria andStockNamerLessThanColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FStockNamer < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andStockNamerLessThanOrEqualTo(String value) {
            addCriterion("FStockNamer <=", value, "stockNamer");
            return (Criteria) this;
        }

        public Criteria andStockNamerLessThanOrEqualToColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FStockNamer <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andStockNamerLike(String value) {
            addCriterion("FStockNamer like", value, "stockNamer");
            return (Criteria) this;
        }

        public Criteria andStockNamerNotLike(String value) {
            addCriterion("FStockNamer not like", value, "stockNamer");
            return (Criteria) this;
        }

        public Criteria andStockNamerIn(List<String> values) {
            addCriterion("FStockNamer in", values, "stockNamer");
            return (Criteria) this;
        }

        public Criteria andStockNamerNotIn(List<String> values) {
            addCriterion("FStockNamer not in", values, "stockNamer");
            return (Criteria) this;
        }

        public Criteria andStockNamerBetween(String value1, String value2) {
            addCriterion("FStockNamer between", value1, value2, "stockNamer");
            return (Criteria) this;
        }

        public Criteria andStockNamerNotBetween(String value1, String value2) {
            addCriterion("FStockNamer not between", value1, value2, "stockNamer");
            return (Criteria) this;
        }

        public Criteria andRateIsNull() {
            addCriterion("FRate is null");
            return (Criteria) this;
        }

        public Criteria andRateIsNotNull() {
            addCriterion("FRate is not null");
            return (Criteria) this;
        }

        public Criteria andRateEqualTo(BigDecimal value) {
            addCriterion("FRate =", value, "rate");
            return (Criteria) this;
        }

        public Criteria andRateEqualToColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FRate = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andRateNotEqualTo(BigDecimal value) {
            addCriterion("FRate <>", value, "rate");
            return (Criteria) this;
        }

        public Criteria andRateNotEqualToColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FRate <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andRateGreaterThan(BigDecimal value) {
            addCriterion("FRate >", value, "rate");
            return (Criteria) this;
        }

        public Criteria andRateGreaterThanColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FRate > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andRateGreaterThanOrEqualTo(BigDecimal value) {
            addCriterion("FRate >=", value, "rate");
            return (Criteria) this;
        }

        public Criteria andRateGreaterThanOrEqualToColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FRate >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andRateLessThan(BigDecimal value) {
            addCriterion("FRate <", value, "rate");
            return (Criteria) this;
        }

        public Criteria andRateLessThanColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FRate < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andRateLessThanOrEqualTo(BigDecimal value) {
            addCriterion("FRate <=", value, "rate");
            return (Criteria) this;
        }

        public Criteria andRateLessThanOrEqualToColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FRate <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andRateIn(List<BigDecimal> values) {
            addCriterion("FRate in", values, "rate");
            return (Criteria) this;
        }

        public Criteria andRateNotIn(List<BigDecimal> values) {
            addCriterion("FRate not in", values, "rate");
            return (Criteria) this;
        }

        public Criteria andRateBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("FRate between", value1, value2, "rate");
            return (Criteria) this;
        }

        public Criteria andRateNotBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("FRate not between", value1, value2, "rate");
            return (Criteria) this;
        }

        public Criteria andCreateTimeIsNull() {
            addCriterion("FCreateTime is null");
            return (Criteria) this;
        }

        public Criteria andCreateTimeIsNotNull() {
            addCriterion("FCreateTime is not null");
            return (Criteria) this;
        }

        public Criteria andCreateTimeEqualTo(Date value) {
            addCriterion("FCreateTime =", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeEqualToColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FCreateTime = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreateTimeNotEqualTo(Date value) {
            addCriterion("FCreateTime <>", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeNotEqualToColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FCreateTime <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreateTimeGreaterThan(Date value) {
            addCriterion("FCreateTime >", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeGreaterThanColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FCreateTime > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreateTimeGreaterThanOrEqualTo(Date value) {
            addCriterion("FCreateTime >=", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeGreaterThanOrEqualToColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FCreateTime >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreateTimeLessThan(Date value) {
            addCriterion("FCreateTime <", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeLessThanColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FCreateTime < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreateTimeLessThanOrEqualTo(Date value) {
            addCriterion("FCreateTime <=", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeLessThanOrEqualToColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FCreateTime <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreateTimeIn(List<Date> values) {
            addCriterion("FCreateTime in", values, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeNotIn(List<Date> values) {
            addCriterion("FCreateTime not in", values, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeBetween(Date value1, Date value2) {
            addCriterion("FCreateTime between", value1, value2, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeNotBetween(Date value1, Date value2) {
            addCriterion("FCreateTime not between", value1, value2, "createTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeIsNull() {
            addCriterion("FUpdateTime is null");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeIsNotNull() {
            addCriterion("FUpdateTime is not null");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeEqualTo(Date value) {
            addCriterion("FUpdateTime =", value, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeEqualToColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FUpdateTime = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUpdateTimeNotEqualTo(Date value) {
            addCriterion("FUpdateTime <>", value, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeNotEqualToColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FUpdateTime <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUpdateTimeGreaterThan(Date value) {
            addCriterion("FUpdateTime >", value, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeGreaterThanColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FUpdateTime > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUpdateTimeGreaterThanOrEqualTo(Date value) {
            addCriterion("FUpdateTime >=", value, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeGreaterThanOrEqualToColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FUpdateTime >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUpdateTimeLessThan(Date value) {
            addCriterion("FUpdateTime <", value, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeLessThanColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FUpdateTime < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUpdateTimeLessThanOrEqualTo(Date value) {
            addCriterion("FUpdateTime <=", value, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeLessThanOrEqualToColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FUpdateTime <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUpdateTimeIn(List<Date> values) {
            addCriterion("FUpdateTime in", values, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeNotIn(List<Date> values) {
            addCriterion("FUpdateTime not in", values, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeBetween(Date value1, Date value2) {
            addCriterion("FUpdateTime between", value1, value2, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeNotBetween(Date value1, Date value2) {
            addCriterion("FUpdateTime not between", value1, value2, "updateTime");
            return (Criteria) this;
        }

        public Criteria andDeleteTimeIsNull() {
            addCriterion("FDeleteTime is null");
            return (Criteria) this;
        }

        public Criteria andDeleteTimeIsNotNull() {
            addCriterion("FDeleteTime is not null");
            return (Criteria) this;
        }

        public Criteria andDeleteTimeEqualTo(Date value) {
            addCriterion("FDeleteTime =", value, "deleteTime");
            return (Criteria) this;
        }

        public Criteria andDeleteTimeEqualToColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FDeleteTime = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDeleteTimeNotEqualTo(Date value) {
            addCriterion("FDeleteTime <>", value, "deleteTime");
            return (Criteria) this;
        }

        public Criteria andDeleteTimeNotEqualToColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FDeleteTime <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDeleteTimeGreaterThan(Date value) {
            addCriterion("FDeleteTime >", value, "deleteTime");
            return (Criteria) this;
        }

        public Criteria andDeleteTimeGreaterThanColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FDeleteTime > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDeleteTimeGreaterThanOrEqualTo(Date value) {
            addCriterion("FDeleteTime >=", value, "deleteTime");
            return (Criteria) this;
        }

        public Criteria andDeleteTimeGreaterThanOrEqualToColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FDeleteTime >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDeleteTimeLessThan(Date value) {
            addCriterion("FDeleteTime <", value, "deleteTime");
            return (Criteria) this;
        }

        public Criteria andDeleteTimeLessThanColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FDeleteTime < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDeleteTimeLessThanOrEqualTo(Date value) {
            addCriterion("FDeleteTime <=", value, "deleteTime");
            return (Criteria) this;
        }

        public Criteria andDeleteTimeLessThanOrEqualToColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FDeleteTime <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDeleteTimeIn(List<Date> values) {
            addCriterion("FDeleteTime in", values, "deleteTime");
            return (Criteria) this;
        }

        public Criteria andDeleteTimeNotIn(List<Date> values) {
            addCriterion("FDeleteTime not in", values, "deleteTime");
            return (Criteria) this;
        }

        public Criteria andDeleteTimeBetween(Date value1, Date value2) {
            addCriterion("FDeleteTime between", value1, value2, "deleteTime");
            return (Criteria) this;
        }

        public Criteria andDeleteTimeNotBetween(Date value1, Date value2) {
            addCriterion("FDeleteTime not between", value1, value2, "deleteTime");
            return (Criteria) this;
        }

        public Criteria andCreatorIsNull() {
            addCriterion("FCreator is null");
            return (Criteria) this;
        }

        public Criteria andCreatorIsNotNull() {
            addCriterion("FCreator is not null");
            return (Criteria) this;
        }

        public Criteria andCreatorEqualTo(Integer value) {
            addCriterion("FCreator =", value, "creator");
            return (Criteria) this;
        }

        public Criteria andCreatorEqualToColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FCreator = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreatorNotEqualTo(Integer value) {
            addCriterion("FCreator <>", value, "creator");
            return (Criteria) this;
        }

        public Criteria andCreatorNotEqualToColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FCreator <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreatorGreaterThan(Integer value) {
            addCriterion("FCreator >", value, "creator");
            return (Criteria) this;
        }

        public Criteria andCreatorGreaterThanColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FCreator > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreatorGreaterThanOrEqualTo(Integer value) {
            addCriterion("FCreator >=", value, "creator");
            return (Criteria) this;
        }

        public Criteria andCreatorGreaterThanOrEqualToColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FCreator >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreatorLessThan(Integer value) {
            addCriterion("FCreator <", value, "creator");
            return (Criteria) this;
        }

        public Criteria andCreatorLessThanColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FCreator < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreatorLessThanOrEqualTo(Integer value) {
            addCriterion("FCreator <=", value, "creator");
            return (Criteria) this;
        }

        public Criteria andCreatorLessThanOrEqualToColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FCreator <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andCreatorIn(List<Integer> values) {
            addCriterion("FCreator in", values, "creator");
            return (Criteria) this;
        }

        public Criteria andCreatorNotIn(List<Integer> values) {
            addCriterion("FCreator not in", values, "creator");
            return (Criteria) this;
        }

        public Criteria andCreatorBetween(Integer value1, Integer value2) {
            addCriterion("FCreator between", value1, value2, "creator");
            return (Criteria) this;
        }

        public Criteria andCreatorNotBetween(Integer value1, Integer value2) {
            addCriterion("FCreator not between", value1, value2, "creator");
            return (Criteria) this;
        }

        public Criteria andUpdaterIsNull() {
            addCriterion("FUpdater is null");
            return (Criteria) this;
        }

        public Criteria andUpdaterIsNotNull() {
            addCriterion("FUpdater is not null");
            return (Criteria) this;
        }

        public Criteria andUpdaterEqualTo(Integer value) {
            addCriterion("FUpdater =", value, "updater");
            return (Criteria) this;
        }

        public Criteria andUpdaterEqualToColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FUpdater = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUpdaterNotEqualTo(Integer value) {
            addCriterion("FUpdater <>", value, "updater");
            return (Criteria) this;
        }

        public Criteria andUpdaterNotEqualToColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FUpdater <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUpdaterGreaterThan(Integer value) {
            addCriterion("FUpdater >", value, "updater");
            return (Criteria) this;
        }

        public Criteria andUpdaterGreaterThanColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FUpdater > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUpdaterGreaterThanOrEqualTo(Integer value) {
            addCriterion("FUpdater >=", value, "updater");
            return (Criteria) this;
        }

        public Criteria andUpdaterGreaterThanOrEqualToColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FUpdater >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUpdaterLessThan(Integer value) {
            addCriterion("FUpdater <", value, "updater");
            return (Criteria) this;
        }

        public Criteria andUpdaterLessThanColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FUpdater < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUpdaterLessThanOrEqualTo(Integer value) {
            addCriterion("FUpdater <=", value, "updater");
            return (Criteria) this;
        }

        public Criteria andUpdaterLessThanOrEqualToColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FUpdater <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andUpdaterIn(List<Integer> values) {
            addCriterion("FUpdater in", values, "updater");
            return (Criteria) this;
        }

        public Criteria andUpdaterNotIn(List<Integer> values) {
            addCriterion("FUpdater not in", values, "updater");
            return (Criteria) this;
        }

        public Criteria andUpdaterBetween(Integer value1, Integer value2) {
            addCriterion("FUpdater between", value1, value2, "updater");
            return (Criteria) this;
        }

        public Criteria andUpdaterNotBetween(Integer value1, Integer value2) {
            addCriterion("FUpdater not between", value1, value2, "updater");
            return (Criteria) this;
        }

        public Criteria andDeleterIsNull() {
            addCriterion("FDeleter is null");
            return (Criteria) this;
        }

        public Criteria andDeleterIsNotNull() {
            addCriterion("FDeleter is not null");
            return (Criteria) this;
        }

        public Criteria andDeleterEqualTo(Integer value) {
            addCriterion("FDeleter =", value, "deleter");
            return (Criteria) this;
        }

        public Criteria andDeleterEqualToColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FDeleter = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDeleterNotEqualTo(Integer value) {
            addCriterion("FDeleter <>", value, "deleter");
            return (Criteria) this;
        }

        public Criteria andDeleterNotEqualToColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FDeleter <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDeleterGreaterThan(Integer value) {
            addCriterion("FDeleter >", value, "deleter");
            return (Criteria) this;
        }

        public Criteria andDeleterGreaterThanColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FDeleter > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDeleterGreaterThanOrEqualTo(Integer value) {
            addCriterion("FDeleter >=", value, "deleter");
            return (Criteria) this;
        }

        public Criteria andDeleterGreaterThanOrEqualToColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FDeleter >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDeleterLessThan(Integer value) {
            addCriterion("FDeleter <", value, "deleter");
            return (Criteria) this;
        }

        public Criteria andDeleterLessThanColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FDeleter < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDeleterLessThanOrEqualTo(Integer value) {
            addCriterion("FDeleter <=", value, "deleter");
            return (Criteria) this;
        }

        public Criteria andDeleterLessThanOrEqualToColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FDeleter <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDeleterIn(List<Integer> values) {
            addCriterion("FDeleter in", values, "deleter");
            return (Criteria) this;
        }

        public Criteria andDeleterNotIn(List<Integer> values) {
            addCriterion("FDeleter not in", values, "deleter");
            return (Criteria) this;
        }

        public Criteria andDeleterBetween(Integer value1, Integer value2) {
            addCriterion("FDeleter between", value1, value2, "deleter");
            return (Criteria) this;
        }

        public Criteria andDeleterNotBetween(Integer value1, Integer value2) {
            addCriterion("FDeleter not between", value1, value2, "deleter");
            return (Criteria) this;
        }

        public Criteria andIsDeleteIsNull() {
            addCriterion("FIsDelete is null");
            return (Criteria) this;
        }

        public Criteria andIsDeleteIsNotNull() {
            addCriterion("FIsDelete is not null");
            return (Criteria) this;
        }

        public Criteria andIsDeleteEqualTo(Integer value) {
            addCriterion("FIsDelete =", value, "isDelete");
            return (Criteria) this;
        }

        public Criteria andIsDeleteEqualToColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FIsDelete = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIsDeleteNotEqualTo(Integer value) {
            addCriterion("FIsDelete <>", value, "isDelete");
            return (Criteria) this;
        }

        public Criteria andIsDeleteNotEqualToColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FIsDelete <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIsDeleteGreaterThan(Integer value) {
            addCriterion("FIsDelete >", value, "isDelete");
            return (Criteria) this;
        }

        public Criteria andIsDeleteGreaterThanColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FIsDelete > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIsDeleteGreaterThanOrEqualTo(Integer value) {
            addCriterion("FIsDelete >=", value, "isDelete");
            return (Criteria) this;
        }

        public Criteria andIsDeleteGreaterThanOrEqualToColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FIsDelete >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIsDeleteLessThan(Integer value) {
            addCriterion("FIsDelete <", value, "isDelete");
            return (Criteria) this;
        }

        public Criteria andIsDeleteLessThanColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FIsDelete < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIsDeleteLessThanOrEqualTo(Integer value) {
            addCriterion("FIsDelete <=", value, "isDelete");
            return (Criteria) this;
        }

        public Criteria andIsDeleteLessThanOrEqualToColumn(FundEntryBase.Column column) {
            addCriterion(new StringBuilder("FIsDelete <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIsDeleteIn(List<Integer> values) {
            addCriterion("FIsDelete in", values, "isDelete");
            return (Criteria) this;
        }

        public Criteria andIsDeleteNotIn(List<Integer> values) {
            addCriterion("FIsDelete not in", values, "isDelete");
            return (Criteria) this;
        }

        public Criteria andIsDeleteBetween(Integer value1, Integer value2) {
            addCriterion("FIsDelete between", value1, value2, "isDelete");
            return (Criteria) this;
        }

        public Criteria andIsDeleteNotBetween(Integer value1, Integer value2) {
            addCriterion("FIsDelete not between", value1, value2, "isDelete");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table t_base_fundentry
     *
     * @mbg.generated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {
        /**
         * This field was generated by MyBatis Generator.
         * This field corresponds to the database table t_base_fundentry
         *
         * @mbg.generated
         */
        private FundEntryBaseExample example;

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table t_base_fundentry
         *
         * @mbg.generated
         */
        protected Criteria(FundEntryBaseExample example) {
            super();
            this.example = example;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table t_base_fundentry
         *
         * @mbg.generated
         */
        public FundEntryBaseExample example() {
            return this.example;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table t_base_fundentry
         *
         * @mbg.generated
         */
        @Deprecated
        public Criteria andIf(boolean ifAdd, ICriteriaAdd add) {
            if (ifAdd) {
                add.add(this);
            }
            return this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table t_base_fundentry
         *
         * @mbg.generated
         */
        public Criteria when(boolean condition, ICriteriaWhen then) {
            if (condition) {
                then.criteria(this);
            }
            return this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table t_base_fundentry
         *
         * @mbg.generated
         */
        public Criteria when(boolean condition, ICriteriaWhen then, ICriteriaWhen otherwise) {
            if (condition) {
                then.criteria(this);
            } else {
                otherwise.criteria(this);
            }
            return this;
        }

        @Deprecated
        public interface ICriteriaAdd {
            /**
             * This method was generated by MyBatis Generator.
             * This method corresponds to the database table t_base_fundentry
             *
             * @mbg.generated
             */
            Criteria add(Criteria add);
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table t_base_fundentry
     *
     * @mbg.generated
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }

    public interface ICriteriaWhen {
        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table t_base_fundentry
         *
         * @mbg.generated
         */
        void criteria(Criteria criteria);
    }

    public interface IExampleWhen {
        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table t_base_fundentry
         *
         * @mbg.generated
         */
        void example(FundEntryBaseExample example);
    }
}